(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1641856476074;

	const files = [
		"service-worker-index.html",
		".DS_Store",
		".background-source.png.icloud",
		".directory",
		"Patrick-Singal-CV.pdf",
		"QVFT-Mechatronics-Update.pdf",
		"QVFT-System-Guide.pdf",
		"alt logo/.DS_Store",
		"alt logo/logo.png",
		"alt logo/logo.webp",
		"background-source.webp",
		"background.png",
		"background.webp",
		"circleHeadshot.png",
		"circleHeadshot.webp",
		"global.css",
		"googlee14279bf61b816bb.html",
		"logo-circle.png",
		"logo-circle.webp",
		"logo.png",
		"logo.webp",
		"manifest.json",
		"projects/.DS_Store",
		"projects/capstone.png",
		"projects/capstone.webp",
		"projects/growth-zone.png",
		"projects/growth-zone.webp",
		"projects/headphones.png",
		"projects/headphones.webp",
		"projects/hvac-system.png",
		"projects/hvac-system.webp",
		"projects/iso-view.png",
		"projects/iso-view.webp",
		"projects/naca0012.png",
		"projects/naca0012.webp",
		"projects/nutrient-zone.png",
		"projects/nutrient-zone.webp",
		"projects/placeholder.png",
		"projects/placeholder.webp",
		"projects/return-line.png",
		"projects/return-line.webp",
		"projects/speaker.png",
		"projects/speaker.webp",
		"projects/supply-line.png",
		"projects/supply-line.webp",
		"projects/top-view.png",
		"projects/top-view.webp",
		"projects/ventilator.png",
		"projects/ventilator.webp",
		"reset.css",
		"social-image.png",
		"social-image.webp"
	];

	const shell = [
		"client/client.69c78fb8.js",
		"client/index.5b05298d.js",
		"client/PageHeader.49d4fa26.js",
		"client/dashboard.a92cf15f.js",
		"client/projects.a2c2e62e.js",
		"client/qvft.fb4ad87a.js",
		"client/cv.dacbe1cd.js",
		"client/sapper-dev-client.1e7a4a5e.js",
		"client/client.99a4ea2b.js"
	];

	const ASSETS = `cache${timestamp}`;

	// `shell` is an array of all the files generated by the bundler,
	// `files` is an array of everything in the `static` directory
	const to_cache = shell.concat(files);
	const cached = new Set(to_cache);

	self.addEventListener('install', event => {
		event.waitUntil(
			caches
				.open(ASSETS)
				.then(cache => cache.addAll(to_cache))
				.then(() => {
					self.skipWaiting();
				})
		);
	});

	self.addEventListener('activate', event => {
		event.waitUntil(
			caches.keys().then(async keys => {
				// delete old caches
				for (const key of keys) {
					if (key !== ASSETS) await caches.delete(key);
				}

				self.clients.claim();
			})
		);
	});

	self.addEventListener('fetch', event => {
		if (event.request.method !== 'GET' || event.request.headers.has('range')) return;

		const url = new URL(event.request.url);

		// don't try to handle e.g. data: URIs
		if (!url.protocol.startsWith('http')) return;

		// ignore dev server requests
		if (url.hostname === self.location.hostname && url.port !== self.location.port) return;

		// always serve static files and bundler-generated assets from cache
		if (url.host === self.location.host && cached.has(url.pathname)) {
			event.respondWith(caches.match(event.request));
			return;
		}

		// for pages, you might want to serve a shell `service-worker-index.html` file,
		// which Sapper has generated for you. It's not right for every
		// app, but if it's right for yours then uncomment this section
		/*
		if (url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
			event.respondWith(caches.match('/service-worker-index.html'));
			return;
		}
		*/

		if (event.request.cache === 'only-if-cached') return;

		// for everything else, try the network first, falling back to
		// cache if the user is offline. (If the pages never change, you
		// might prefer a cache-first approach to a network-first one.)
		event.respondWith(
			caches
				.open(`offline${timestamp}`)
				.then(async cache => {
					try {
						const response = await fetch(event.request);
						cache.put(event.request, response.clone());
						return response;
					} catch(err) {
						const response = await cache.match(event.request);
						if (response) return response;

						throw err;
					}
				})
		);
	});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
