import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, v as validate_slots, a as space, p as create_component, e as element, t as text, q as query_selector_all, g as detach_dev, f as claim_space, r as claim_component, c as claim_element, b as children, u as claim_text, h as attr_dev, j as add_location, k as src_url_equal, m as insert_hydration_dev, w as mount_component, n as append_hydration_dev, x as transition_in, y as transition_out, z as destroy_component } from './client.17bff019.js';
import { P as PageHeader } from './PageHeader.e725a13a.js';

/* src/routes/cv.svelte generated by Svelte v3.45.0 */
const file = "src/routes/cv.svelte";

// (14:0) <PageHeader>
function create_default_slot(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("CV");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "CV");
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(14:0) <PageHeader>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let pageheader;
	let t1;
	let div1;
	let p;
	let a0;
	let t2;
	let t3;
	let div0;
	let object;
	let embed;
	let embed_src_value;
	let t4;
	let div2;
	let a1;
	let t5;
	let current;

	pageheader = new PageHeader({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t0 = space();
			create_component(pageheader.$$.fragment);
			t1 = space();
			div1 = element("div");
			p = element("p");
			a0 = element("a");
			t2 = text("Download CV here");
			t3 = space();
			div0 = element("div");
			object = element("object");
			embed = element("embed");
			t4 = space();
			div2 = element("div");
			a1 = element("a");
			t5 = text("View CV");
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all('[data-svelte=\"svelte-11xp49l\"]', document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			claim_component(pageheader.$$.fragment, nodes);
			t1 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			p = claim_element(div1_nodes, "P", {});
			var p_nodes = children(p);
			a0 = claim_element(p_nodes, "A", { href: true, download: true });
			var a0_nodes = children(a0);
			t2 = claim_text(a0_nodes, "Download CV here");
			a0_nodes.forEach(detach_dev);
			p_nodes.forEach(detach_dev);
			t3 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);

			object = claim_element(div0_nodes, "OBJECT", {
				width: true,
				height: true,
				title: true,
				data: true,
				type: true
			});

			var object_nodes = children(object);

			embed = claim_element(object_nodes, "EMBED", {
				title: true,
				width: true,
				src: true,
				type: true
			});

			object_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			a1 = claim_element(div2_nodes, "A", { class: true, href: true });
			var a1_nodes = children(a1);
			t5 = claim_text(a1_nodes, "View CV");
			a1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Patrick Singal";
			attr_dev(a0, "href", "Patrick-Singal-CV.pdf");
			attr_dev(a0, "download", "");
			add_location(a0, file, 16, 4, 875);
			add_location(p, file, 15, 2, 867);
			attr_dev(embed, "title", "Patrick Singal CV");
			attr_dev(embed, "width", "100%");
			if (!src_url_equal(embed.src, embed_src_value = "Patrick-Singal-CV.pdf")) attr_dev(embed, "src", embed_src_value);
			attr_dev(embed, "type", "application/pdf");
			add_location(embed, file, 29, 6, 1149);
			attr_dev(object, "width", "100%");
			attr_dev(object, "height", "100%");
			attr_dev(object, "title", "Patrick Singal CV");
			attr_dev(object, "data", "Patrick-Singal-CV.pdf");
			attr_dev(object, "type", "application/pdf");
			add_location(object, file, 23, 4, 999);
			attr_dev(div0, "class", "pdfWrapper svelte-1t725bw");
			add_location(div0, file, 22, 2, 970);
			attr_dev(div1, "class", "contentWrapper desktop svelte-1t725bw");
			add_location(div1, file, 14, 0, 828);
			attr_dev(a1, "class", "button svelte-1t725bw");
			attr_dev(a1, "href", "Patrick-Singal-CV.pdf");
			add_location(a1, file, 38, 2, 1349);
			attr_dev(div2, "class", "contentWrapper mobile svelte-1t725bw");
			add_location(div2, file, 37, 0, 1311);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, t0, anchor);
			mount_component(pageheader, target, anchor);
			insert_hydration_dev(target, t1, anchor);
			insert_hydration_dev(target, div1, anchor);
			append_hydration_dev(div1, p);
			append_hydration_dev(p, a0);
			append_hydration_dev(a0, t2);
			append_hydration_dev(div1, t3);
			append_hydration_dev(div1, div0);
			append_hydration_dev(div0, object);
			append_hydration_dev(object, embed);
			insert_hydration_dev(target, t4, anchor);
			insert_hydration_dev(target, div2, anchor);
			append_hydration_dev(div2, a1);
			append_hydration_dev(a1, t5);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const pageheader_changes = {};

			if (dirty & /*$$scope*/ 1) {
				pageheader_changes.$$scope = { dirty, ctx };
			}

			pageheader.$set(pageheader_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(pageheader.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(pageheader.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			destroy_component(pageheader, detaching);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(div1);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(div2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Cv', slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Cv> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ PageHeader });
	return [];
}

class Cv extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Cv",
			options,
			id: create_fragment.name
		});
	}
}

export default Cv;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3YuMDljZGMyZTEuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvY3Yuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gIC8vIGltcG9ydCB7IG9uTW91bnQgfSBmcm9tIFwic3ZlbHRlXCI7XG4gIGltcG9ydCBQYWdlSGVhZGVyIGZyb20gXCIuLi9jb21wb25lbnRzL1BhZ2VIZWFkZXIuc3ZlbHRlXCI7XG4gIC8vIG9uTW91bnQoYXN5bmMgKCkgPT4ge1xuICAvLyAgIGd0YWcoXCJjb25maWdcIiwgXCJVQS05MzU0OTIzNS02XCIsIHsgcGFnZV9wYXRoOiBcIi9jdlwiIH0pO1xuICAvLyB9KTtcbjwvc2NyaXB0PlxuXG48c3R5bGU+XG4gIGRpdi5wZGZXcmFwcGVyIHtcbiAgICBtYXJnaW4tdG9wOiAycmVtO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMjk4dmg7XG4gIH1cbiAgYS5idXR0b24ge1xuICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgbWluLWhlaWdodDogM3JlbTtcbiAgICBwYWRkaW5nOiAwLjVyZW0gMXJlbTtcbiAgICBmb250LXNpemU6IDEuMnJlbTtcbiAgICBsaW5lLWhlaWdodDogMS40cmVtO1xuICAgIGNvbG9yOiB3aGl0ZTtcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tdGhlbWVDb2xvckRhcmspO1xuICAgIGJvcmRlci1yYWRpdXM6IDAuNXJlbTtcbiAgICBib3gtc2hhZG93OiAxcHggMXB4IDJweCAycHggI2RlZGVkZWRkO1xuICB9XG4gIC5jb250ZW50V3JhcHBlciB7XG4gICAgbWFyZ2luLXRvcDogMnJlbTtcbiAgfVxuICAubW9iaWxlIHtcbiAgICBkaXNwbGF5OiBub25lO1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICB9XG4gIEBtZWRpYSAobWF4LXdpZHRoOiA3MDBweCkge1xuICAgIC5tb2JpbGUge1xuICAgICAgZGlzcGxheTogZmxleCAhaW1wb3J0YW50O1xuICAgIH1cbiAgICAuZGVza3RvcCB7XG4gICAgICBkaXNwbGF5OiBub25lO1xuICAgIH1cbiAgfVxuPC9zdHlsZT5cblxuPHN2ZWx0ZTpoZWFkPlxuICA8dGl0bGU+UGF0cmljayBTaW5nYWw8L3RpdGxlPlxuPC9zdmVsdGU6aGVhZD5cbjxQYWdlSGVhZGVyPkNWPC9QYWdlSGVhZGVyPlxuPGRpdiBjbGFzcz1cImNvbnRlbnRXcmFwcGVyIGRlc2t0b3BcIj5cbiAgPHA+XG4gICAgPGFcbiAgICAgIGhyZWY9XCJQYXRyaWNrLVNpbmdhbC1DVi5wZGZcIlxuICAgICAgZG93bmxvYWQ+XG4gICAgICBEb3dubG9hZCBDViBoZXJlXG4gICAgPC9hPlxuICA8L3A+XG4gIDxkaXYgY2xhc3M9XCJwZGZXcmFwcGVyXCI+XG4gICAgPG9iamVjdFxuICAgICAgd2lkdGg9XCIxMDAlXCJcbiAgICAgIGhlaWdodD1cIjEwMCVcIlxuICAgICAgdGl0bGU9XCJQYXRyaWNrIFNpbmdhbCBDVlwiXG4gICAgICBkYXRhPVwiUGF0cmljay1TaW5nYWwtQ1YucGRmXCJcbiAgICAgIHR5cGU9XCJhcHBsaWNhdGlvbi9wZGZcIj5cbiAgICAgIDxlbWJlZFxuICAgICAgICB0aXRsZT1cIlBhdHJpY2sgU2luZ2FsIENWXCJcbiAgICAgICAgd2lkdGg9XCIxMDAlXCJcbiAgICAgICAgc3JjPVwiUGF0cmljay1TaW5nYWwtQ1YucGRmXCJcbiAgICAgICAgdHlwZT1cImFwcGxpY2F0aW9uL3BkZlwiIC8+XG4gICAgPC9vYmplY3Q+XG4gIDwvZGl2PlxuPC9kaXY+XG48ZGl2IGNsYXNzPVwiY29udGVudFdyYXBwZXIgbW9iaWxlXCI+XG4gIDxhIGNsYXNzPVwiYnV0dG9uXCIgaHJlZj1cIlBhdHJpY2stU2luZ2FsLUNWLnBkZlwiPlZpZXcgQ1Y8L2E+XG48L2Rpdj5cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7WUFhWSxJQUFFOzs7eUJBQUYsSUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7YUFLQyxrQkFFWDs7Ozs7Ozs7YUFrQjZDLFNBQU87Ozs7Ozs7Ozs7Ozs7Ozs2QkFwQnpDLGtCQUVYOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs2QkFrQjZDLFNBQU87Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXhCeEQsb0JBc0JNO0dBckJKLG9CQU1JO0dBTEYsb0JBSUk7OztHQUVOLG9CQWFNO0dBWkosb0JBV1M7R0FMUCxvQkFJMkI7O0dBSWpDLG9CQUVNO0dBREosb0JBQTBEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
